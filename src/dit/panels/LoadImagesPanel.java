package dit.panels;

import dit.*;
import java.awt.Component;
import java.awt.Container;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.*;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import java.util.Vector;
import java.util.List;
import java.util.ArrayList;
import java.lang.String;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author christianprescott
 */
public class LoadImagesPanel extends JPanel implements WizardPanel {
    
    /**
     * Creates new form LoadImagesPanel
     */
    public LoadImagesPanel() {
        initComponents();
        DEIDGUI.title = "Load Images";
        DEIDGUI.helpButton.setEnabled(true);
        
        jLabel3.setText(DeidData.inputFiles.size()+" images loaded");
        jListImages.setListData(DeidData.inputFiles);
        
        
        btnRemovedAll.setVisible(false);
        
        jListImages.addListSelectionListener(new ListSelectionListener(){
            @Override  public void valueChanged(ListSelectionEvent e){
                jLabel2.setText(jListImages.getSelectedValues().length+" line(s) selected");
                
            }
        }
                
                );
        DEIDGUI.log("LoadImagesPanel initialized");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnAddFiles = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListImages = new javax.swing.JList();
        jButtonRemove = new javax.swing.JButton();
        btnSelectAll = new javax.swing.JButton();
        btnRemovedAll = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAddDir = new javax.swing.JButton();
        cbxDoDeface = new javax.swing.JCheckBox();

        jLabel1.setText("<html><p>Select images or directories of images to de-identify. Images may be in DICOM, Analyze, or NIfTI format. DICOM and Analyze files will be converted to NIfTI.</p><p>&nbsp;</p></html>");

        btnAddFiles.setText("Add images from 1 directory..");
        btnAddFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFilesActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jListImages);

        jButtonRemove.setText("Remove selected");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        btnSelectAll.setText("Select All");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnRemovedAll.setText("Clear All");
        btnRemovedAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovedAllActionPerformed(evt);
            }
        });

        jLabel2.setText("No line is selected.");

        jLabel3.setText("0 images loaded");

        btnAddDir.setText("Add images from multiple directories...");
        btnAddDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirActionPerformed(evt);
            }
        });

        cbxDoDeface.setForeground(new java.awt.Color(255, 0, 0));
        cbxDoDeface.setText("Check if images have been skull stripped.");
        cbxDoDeface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDoDefaceActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 207, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(btnAddFiles)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnAddDir)))
                        .add(17, 17, 17)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(0, 40, Short.MAX_VALUE)
                                .add(btnRemovedAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jButtonRemove)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnSelectAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(cbxDoDeface, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnAddFiles)
                    .add(jButtonRemove)
                    .add(btnSelectAll)
                    .add(btnRemovedAll)
                    .add(btnAddDir))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cbxDoDeface)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void ReadAllFile(Vector<File> list, String filePath) {
        File f = null;
        f = new File(filePath);
        File[] files = f.listFiles(); // get all files
        for (File file : files) {
            if(file.isDirectory()) {
                
                ReadAllFile(list, file.getAbsolutePath());
            } else {
                if (file.getName().endsWith(".nii")||file.getName().endsWith(".nii.gz")||file.getName().endsWith(".dcm")||file.getName().endsWith(".img")||file.getName().endsWith(".hdr"))
                    list.add(file);
            }
        }
        //for(int i=0; i< list.size(); i++) {
        //  System.out.println(list.get(i).getAbsolutePath());
        //}
        
    }
    //private Vector<File> displayedFiles = new Vector<File>();
    private void btnAddFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilesActionPerformed
        final javax.swing.JFileChooser fc = new JFileChooser();
         fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        LoadImage(fc);   
    }//GEN-LAST:event_btnAddFilesActionPerformed
    
    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        Object[] selection = jListImages.getSelectedValues();
        DeidData.inputFiles.removeAll(Arrays.asList(selection));
        jListImages.setListData(DeidData.inputFiles);
        DEIDGUI.log("Removed " + selection.length + " input images");
        jLabel2.setText("No line is selected.");
    }//GEN-LAST:event_jButtonRemoveActionPerformed
    
    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        // TODO add your handling code here:
        int ind[];
        ind = new int[DeidData.inputFiles.size()];
        for(int i = 0; i< DeidData.inputFiles.size();i++ )
        {
            ind[i] = i;            
        }
        jListImages.setSelectedIndices(ind);
        jLabel2.setText(DeidData.inputFiles.size()+" line(s) selected.");
    }//GEN-LAST:event_btnSelectAllActionPerformed
    
    private void btnRemovedAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovedAllActionPerformed
        // TODO add your handling code here:
        jListImages.clearSelection();
        jLabel2.setText("No line is selected.");
    }//GEN-LAST:event_btnRemovedAllActionPerformed
    
    private void btnAddDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirActionPerformed
        // TODO add your handling code here:
        final javax.swing.JFileChooser fc = new JFileChooser(){
            public void approveSelection(){
                if(getSelectedFile().isFile())
                    return;
                else
                    super.approveSelection();
            }
        };
        hideTextfield(fc.getComponents());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        LoadImage(fc);
    }//GEN-LAST:event_btnAddDirActionPerformed

    private void cbxDoDefaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDoDefaceActionPerformed
        DeidData.doDeface=cbxDoDeface.isSelected();
    }//GEN-LAST:event_cbxDoDefaceActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDir;
    private javax.swing.JButton btnAddFiles;
    private javax.swing.JButton btnRemovedAll;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JCheckBox cbxDoDeface;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListImages;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public WizardPanel getNextPanel() {
        final WizardPanel nextPanel;
        
        DeidData.niftiFiles.clear();
        // Determine if conversions of the selected images are necessary
        HashSet<File> dicomDirs = new HashSet<File>(),
                analyzePairs = new HashSet<File>();
        Iterator<File> imageIt = FileUtils.getFileListRecursively(
                DeidData.inputFiles, 1).iterator();
        while (imageIt.hasNext()) {
            File curImage = imageIt.next();
            String extension = FileUtils.getExtension(curImage);
            if (extension.equals(FileUtils.Extensions.dicom)) {
                // Use the parent directory of the file because dcm2nii will do
                // so anyway. Specifying each file is redundant.
                dicomDirs.add(curImage.getParentFile());
            } else   // bet can handle hdr/img/nii files
                     //Conversion will never be used.
            {
                DeidData.niftiFiles.add(curImage);
            }
        }
        
        if (dicomDirs.size() > 0 && !FileUtils.OS.isWindows()) { // library on windows can handle img/hdr without converting.
            nextPanel = new ConvertingProgressPanel(dicomDirs, analyzePairs);
        } else {
            nextPanel = new LoadDemoPanel();
        }
        return nextPanel;
    }
    
    @Override
    public WizardPanel getPreviousPanel() {
        return new UserPanel();
    }
    
    
    //this function make file selection textfield and label do not display
    private void hideTextfield(Component[] jc){
        for(int i=0;i<jc.length;i++)
        {
            Component c=jc[i];
            if(c instanceof JTextField)
            {
                 c.setVisible(false);
            }
            
            if(c instanceof JLabel)
            {
                String text=((JLabel)c).getText();
                if(text.startsWith("Selection:"))
                  c.getParent().setVisible(false);
            }
            if(c instanceof Container)
                hideTextfield(((Container)c).getComponents());
        }
    }
    
    private void LoadImage(JFileChooser fc)
    {
        
        fc.setMultiSelectionEnabled(true);
       
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(new ImageFilter());
        String dirrec;
        File filename = new File("/tmp/imagepath.txt");
        try{
            FileReader fr = new FileReader(filename);
            BufferedReader br = new BufferedReader(fr);
            dirrec = br.readLine();
            System.out.println(dirrec);
            if (dirrec!= null)
            {
                fc.setCurrentDirectory(new File(dirrec));
            }
            
        }catch(IOException e)
        {
            fc.setCurrentDirectory(null);
        }
        
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = fc.getSelectedFiles();
            //angelo added
            for (int idx = 0; idx < selectedFiles.length; idx ++)
            {
                if(selectedFiles[idx].isDirectory())
                {
                    Vector<File> imgfiles = new Vector<File>();
                    ReadAllFile(imgfiles, selectedFiles[idx].getAbsolutePath());
                    DeidData.parentPath = selectedFiles[idx].getParentFile().getAbsolutePath();
                    DeidData.addInputFile(imgfiles);
                }
                else{DeidData.addInputFile(selectedFiles[idx]);}
            }
            jListImages.setListData(DeidData.inputFiles);
            
            String dir = fc.getSelectedFile().getParent();
            
            
            if (!filename.exists()){
                try{
                    filename.createNewFile();
                }
                catch (IOException e) {
                    DEIDGUI.log("Fail to create file!" );
                }
                
            }
            try
            {
                
                RandomAccessFile  pathfile = new RandomAccessFile (filename,"rw");
                pathfile.writeBytes(dir);
            }catch(IOException e)
            {
                DEIDGUI.log("No Parent Directory Found!" );
            }
            DEIDGUI.log("Added " + selectedFiles.length + " input images");
            jLabel3.setText(DeidData.inputFiles.size() +" image(s) loaded.");
        }
    }
}
